<?php

namespace Container2uyByNp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getStofDoctrineExtensions_Listener_LoggableService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'stof_doctrine_extensions.listener.loggable' shared service.
     *
     * @return \Gedmo\Loggable\LoggableListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/event-manager/src/EventSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/gedmo/doctrine-extensions/src/Mapping/MappedEventSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/gedmo/doctrine-extensions/src/Loggable/LoggableListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/gedmo/doctrine-extensions/src/Tool/ActorProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/stof/doctrine-extensions-bundle/src/Tool/TokenStorageActorProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/gedmo/doctrine-extensions/src/Mapping/Driver/AttributeReader.php';

        $container->privates['stof_doctrine_extensions.listener.loggable'] = $instance = new \Gedmo\Loggable\LoggableListener();

        $instance->setCacheItemPool(($container->privates['stof_doctrine_extensions.metadata_cache'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setAnnotationReader(($container->privates['.stof_doctrine_extensions.reader'] ??= new \Gedmo\Mapping\Driver\AttributeReader()));
        $instance->setActorProvider(new \Stof\DoctrineExtensionsBundle\Tool\TokenStorageActorProvider(($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->services['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container))));

        return $instance;
    }
}
