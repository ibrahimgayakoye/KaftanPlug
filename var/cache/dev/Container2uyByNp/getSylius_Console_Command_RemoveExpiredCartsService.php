<?php

namespace Container2uyByNp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSylius_Console_Command_RemoveExpiredCartsService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'sylius.console.command.remove_expired_carts' shared service.
     *
     * @return \Sylius\Bundle\OrderBundle\Console\Command\RemoveExpiredCartsCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/SignalableCommandInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/sylius/src/Sylius/Bundle/OrderBundle/Console/Command/RemoveExpiredCartsCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/sylius/src/Sylius/Component/Order/Remover/ExpiredCartsRemoverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/sylius/src/Sylius/Bundle/OrderBundle/Remover/ExpiredCartsRemover.php';

        $container->services['sylius.console.command.remove_expired_carts'] = $instance = new \Sylius\Bundle\OrderBundle\Console\Command\RemoveExpiredCartsCommand(new \Sylius\Bundle\OrderBundle\Remover\ExpiredCartsRemover(($container->services['sylius.repository.order'] ?? self::getSylius_Repository_OrderService($container)), ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), '2 days'), '2 days');

        $instance->setName('sylius:remove-expired-carts');
        $instance->setDescription('Removes carts that have been idle for a period set in `sylius_order.expiration.cart` configuration key.');

        return $instance;
    }
}
