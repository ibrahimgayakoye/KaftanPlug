<?php

namespace Container2uyByNp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getApiPlatform_HttpCache_Processor_AddHeadersService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'api_platform.http_cache.processor.add_headers' shared service.
     *
     * @return \ApiPlatform\HttpCache\State\AddHeadersProcessor
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/ProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/http-cache/State/AddHeadersProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/Processor/AddLinkHeaderProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/Util/CorsTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/hydra/State/HydraLinkProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/Util/HttpResponseHeadersTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/Util/HttpResponseStatusTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/Processor/RespondProcessor.php';

        $a = ($container->privates['sylius_api.api_platform.routing.iri_converter'] ?? self::getSyliusApi_ApiPlatform_Routing_IriConverterService($container));

        if (isset($container->privates['api_platform.http_cache.processor.add_headers'])) {
            return $container->privates['api_platform.http_cache.processor.add_headers'];
        }
        $b = new \ApiPlatform\State\Processor\RespondProcessor($a, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), ($container->privates['api_platform.metadata.operation.metadata_factory'] ?? self::getApiPlatform_Metadata_Operation_MetadataFactoryService($container)));

        $c = ($container->services['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true));

        if ($container->has('debug.stopwatch')) {
            $b->setStopwatch($c);
        }

        $d = new \ApiPlatform\State\Processor\AddLinkHeaderProcessor(new \ApiPlatform\Hydra\State\HydraLinkProcessor($b, ($container->privates['api_platform.router'] ?? self::getApiPlatform_RouterService($container))));
        if ($container->has('debug.stopwatch')) {
            $d->setStopwatch($c);
        }

        return $container->privates['api_platform.http_cache.processor.add_headers'] = new \ApiPlatform\HttpCache\State\AddHeadersProcessor($d, true, NULL, NULL, $container->parameters['api_platform.http_cache.vary'], NULL);
    }
}
