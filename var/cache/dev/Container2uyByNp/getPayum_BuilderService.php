<?php

namespace Container2uyByNp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPayum_BuilderService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'payum.builder' shared service.
     *
     * @return \Payum\Core\PayumBuilder
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/payum/core/Payum/Core/PayumBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/payum/payum-bundle/Builder/HttpRequestVerifierBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/payum/payum-bundle/Builder/TokenFactoryBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/payum/payum-bundle/Builder/CoreGatewayFactoryBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/payum/core/Payum/Core/Bridge/Symfony/Builder/GatewayFactoryBuilder.php';

        $container->privates['payum.builder'] = $instance = new \Payum\Core\PayumBuilder();

        $instance->setMainRegistry(($container->services['payum.static_registry'] ?? $container->load('getPayum_StaticRegistryService')));
        $instance->setHttpRequestVerifier(new \Payum\Bundle\PayumBundle\Builder\HttpRequestVerifierBuilder());
        $instance->setTokenFactory(new \Payum\Bundle\PayumBundle\Builder\TokenFactoryBuilder(($container->services['router'] ?? self::getRouterService($container))));
        $instance->setTokenStorage(($container->services['payum.security.token_storage'] ?? $container->load('getPayum_Security_TokenStorageService')));
        $instance->setGenericTokenFactoryPaths(['capture' => 'payum_capture_do', 'notify' => 'payum_notify_do', 'authorize' => 'payum_authorize_do', 'refund' => 'payum_refund_do', 'cancel' => 'payum_cancel_do', 'payout' => 'payum_payout_do']);
        $instance->setCoreGatewayFactory(new \Payum\Bundle\PayumBundle\Builder\CoreGatewayFactoryBuilder($container));
        $instance->addCoreGatewayFactoryConfig(['payum.template.layout' => '@PayumCore\\layout.html.twig', 'payum.template.obtain_credit_card' => '@PayumSymfonyBridge\\obtainCreditCard.html.twig', 'payum.paths' => ['PayumSymfonyBridge' => (\dirname(__DIR__, 4).'/vendor/payum/payum-bundle/Resources/views')], 'payum.action.get_http_request' => ($container->services['payum.action.get_http_request'] ?? $container->load('getPayum_Action_GetHttpRequestService')), 'payum.action.obtain_credit_card' => ($container->services['payum.action.obtain_credit_card_builder'] ?? $container->load('getPayum_Action_ObtainCreditCardBuilderService'))]);
        $instance->addGateway('offline', ['factory' => 'offline']);
        $instance->setGatewayConfigStorage(($container->services['payum.dynamic_gateways.config_storage'] ?? $container->load('getPayum_DynamicGateways_ConfigStorageService')));
        $instance->addCoreGatewayFactoryConfig(['twig.env' => ($container->services['twig'] ?? self::getTwigService($container))]);
        $instance->addCoreGatewayFactoryConfig(['payum.action.sylius.authorize_payment' => '@sylius_payum.action.authorize_payment', 'payum.action.sylius.capture_payment' => '@sylius_payum.action.capture_payment', 'payum.action.sylius_payum.action.execute_same_request_with_payment_details' => '@sylius_payum.action.execute_same_request_with_payment_details', 'payum.action.sylius.resolve_next_route' => '@sylius_payum.action.resolve_next_route', 'payum.action.sylius_payum.action.payment_request.get_http_request' => '@sylius_payum.action.payment_request.get_http_request', 'payum.prepend_actions' => ['payum.action.sylius_payum.action.payment_request.get_http_request', 'payum.action.sylius_payum.action.payment_request.render_template'], 'payum.action.sylius_payum.action.payment_request.render_template' => '@sylius_payum.action.payment_request.render_template', 'payum.extension.psr_logger' => '@payum.extension.logger', 'payum.extension.log_executed_actions' => '@payum.extension.log_executed_actions', 'payum.extension.profile_collector' => '@payum.profiler.payum_collector', 'payum.prepend_extensions' => ['payum.extension.profile_collector', 'payum.extension.sylius_payum.extension.update_payment_state'], 'payum.extension.payum.extension.storage.app_entity_order_order' => '@payum.extension.storage.app_entity_order_order', 'payum.extension.payum.extension.storage.app_entity_payment_payment' => '@payum.extension.storage.app_entity_payment_payment', 'payum.extension.sylius_payum.extension.update_payment_state' => '@sylius_payum.extension.update_payment_state']);
        $instance->addGatewayFactoryConfig('offline', ['payum.action.sylius.offline.convert_payment' => '@sylius_payum.action.offline.convert_payment', 'payum.action.sylius.offline.status' => '@sylius_payum.action.offline.status', 'payum.action.sylius.offline.resolve_next_route' => '@sylius_payum.action.offline.resolve_next_route']);
        $instance->addGatewayFactoryConfig('sylius_paypal', ['payum.action.payum.action.authorize' => '@sylius_paypal.payum.action.authorize', 'payum.action.payum.action.capture' => '@sylius_paypal.payum.action.capture', 'payum.action.payum.action.complete_order' => '@sylius_paypal.payum.action.complete_order', 'payum.action.sylius.resolve_next_route' => '@sylius_paypal.payum.action.resolve_next_route']);
        $instance->addGatewayFactoryConfig('mollie', ['payum.action.payum.action.capture' => '@sylius_mollie.payum.action.capture', 'payum.action.payum.action.notify' => '@sylius_mollie.payum.action.notify', 'payum.action.payum.action.status' => '@sylius_mollie.payum.action.status', 'payum.action.payum.action.convert_mollie_payment' => '@sylius_mollie.payum.action.convert_mollie_payment', 'payum.action.payum.action.create_payment' => '@sylius_mollie.payum.action.create_payment', 'payum.action.payum.action.create_order' => '@sylius_mollie.payum.action.create_order', 'payum.action.payum.action.api.create_customer' => '@sylius_mollie.payum.action.create_customer']);
        $instance->addGatewayFactoryConfig('mollie_subscription', ['payum.action.payum.action.capture_subscription' => '@sylius_mollie.payum.action.capture', 'payum.action.payum.action.notify_subscription' => '@sylius_mollie.payum.action.notify', 'payum.action.payum.action.status_subscription' => '@sylius_mollie.payum.action.status', 'payum.action.payum.action.convert_mollie_subscription_payment' => '@sylius_mollie.payum.action.subscription.convert_mollie_subscription_payment', 'payum.action.payum.action.create_payment_subscription' => '@sylius_mollie.payum.action.create_payment', 'payum.action.payum.action.create_on_demand_payment_action' => '@sylius_mollie.payum.action.create_on_demand_payment', 'payum.action.payum.action.create_on_demand_subscription_action' => '@sylius_mollie.payum.action.subscription.create_on_demand_subscription', 'payum.action.payum.action.create_internal_subscription' => '@sylius_mollie.payum.action.subscription.create_internal_subscription', 'payum.action.payum.action.api.create_customer_subscription' => '@sylius_mollie.payum.action.create_customer', 'payum.action.payum.action.state_machine.cancel_recurring_subscription' => '@sylius_mollie.payum.action.subscription.cancel_recurring_subscription', 'payum.action.payum.action.state_machine.status_recurring_subscription' => '@sylius_mollie.payum.action.subscription.status_recurring_subscription']);
        $instance->addGatewayFactory('sylius_paypal', new \Payum\Core\Bridge\Symfony\Builder\GatewayFactoryBuilder('Sylius\\PayPalPlugin\\Payum\\Factory\\PayPalGatewayFactory'));
        $instance->addGatewayFactory('mollie', ($container->services['sylius_mollie.payum.gateway_factory.builder.mollie'] ?? $container->load('getSyliusMollie_Payum_GatewayFactory_Builder_MollieService')));
        $instance->addGatewayFactory('mollie_subscription', ($container->services['sylius_mollie.payum.gateway_factory.builder.mollie_subscription'] ?? $container->load('getSyliusMollie_Payum_GatewayFactory_Builder_MollieSubscriptionService')));

        return $instance;
    }
}
