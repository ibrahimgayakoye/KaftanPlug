<?php

namespace Container2uyByNp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSyliusMollie_Resolver_PaymentMethodsService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'sylius_mollie.resolver.payment_methods' shared service.
     *
     * @return \Sylius\MolliePlugin\Resolver\MolliePaymentsMethodResolver
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/sylius/mollie-plugin/src/Resolver/MolliePaymentsMethodResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/mollie-plugin/src/Resolver/MolliePaymentsMethodResolver.php';

        $a = ($container->services['sylius_mollie.resolver.order.payment_checkout_order'] ?? $container->load('getSyliusMollie_Resolver_Order_PaymentCheckoutOrderService'));

        if (isset($container->services['sylius_mollie.resolver.payment_methods'])) {
            return $container->services['sylius_mollie.resolver.payment_methods'];
        }
        $b = ($container->services['sylius_mollie.resolver.mollie_allowed_methods'] ?? $container->load('getSyliusMollie_Resolver_MollieAllowedMethodsService'));

        if (isset($container->services['sylius_mollie.resolver.payment_methods'])) {
            return $container->services['sylius_mollie.resolver.payment_methods'];
        }
        $c = ($container->services['sylius_mollie.resolver.mollie_factory_name'] ?? self::getSyliusMollie_Resolver_MollieFactoryNameService($container));

        if (isset($container->services['sylius_mollie.resolver.payment_methods'])) {
            return $container->services['sylius_mollie.resolver.payment_methods'];
        }

        return $container->services['sylius_mollie.resolver.payment_methods'] = new \Sylius\MolliePlugin\Resolver\MolliePaymentsMethodResolver(($container->services['sylius_mollie.repository.mollie_gateway_config'] ?? self::getSyliusMollie_Repository_MollieGatewayConfigService($container)), ($container->services['sylius_mollie.resolver.mollie_countries_restriction'] ?? $container->load('getSyliusMollie_Resolver_MollieCountriesRestrictionService')), ($container->services['sylius_mollie.voucher.checker.product_voucher_type'] ?? $container->load('getSyliusMollie_Voucher_Checker_ProductVoucherTypeService')), $a, ($container->privates['sylius_mollie.repository.query.payment_method.mollie_based'] ?? self::getSyliusMollie_Repository_Query_PaymentMethod_MollieBasedService($container)), $b, ($container->services['sylius_mollie.logger.mollie_logger_action'] ?? $container->load('getSyliusMollie_Logger_MollieLoggerActionService')), $c, ($container->services['sylius_mollie.provider.divisor'] ??= new \Sylius\MolliePlugin\Provider\DivisorProvider()));
    }
}
