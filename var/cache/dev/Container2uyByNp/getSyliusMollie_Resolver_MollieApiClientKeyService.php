<?php

namespace Container2uyByNp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSyliusMollie_Resolver_MollieApiClientKeyService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'sylius_mollie.resolver.mollie_api_client_key' shared service.
     *
     * @return \Sylius\MolliePlugin\Resolver\MollieApiClientKeyResolver
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/sylius/mollie-plugin/src/Resolver/MollieApiClientKeyResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/mollie-plugin/src/Resolver/MollieApiClientKeyResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/mollie/mollie-api-php/src/MollieApiClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/mollie-plugin/src/Client/MollieApiClient.php';

        $a = ($container->services['sylius_mollie.logger.mollie_logger_action'] ?? $container->load('getSyliusMollie_Logger_MollieLoggerActionService'));

        if (isset($container->services['sylius_mollie.resolver.mollie_api_client_key'])) {
            return $container->services['sylius_mollie.resolver.mollie_api_client_key'];
        }
        $b = ($container->services['sylius_mollie.resolver.mollie_factory_name'] ?? self::getSyliusMollie_Resolver_MollieFactoryNameService($container));

        if (isset($container->services['sylius_mollie.resolver.mollie_api_client_key'])) {
            return $container->services['sylius_mollie.resolver.mollie_api_client_key'];
        }

        return $container->services['sylius_mollie.resolver.mollie_api_client_key'] = new \Sylius\MolliePlugin\Resolver\MollieApiClientKeyResolver(($container->services['sylius_mollie.client.mollie_api'] ??= new \Sylius\MolliePlugin\Client\MollieApiClient()), $a, ($container->privates['sylius_mollie.repository.query.payment_method.mollie_based'] ?? self::getSyliusMollie_Repository_Query_PaymentMethod_MollieBasedService($container)), ($container->services['sylius.context.channel'] ?? self::getSylius_Context_ChannelService($container)), $b);
    }
}
