<?php

namespace Container2uyByNp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSyliusApi_StateProcessor_Common_Messenger_PersistService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'sylius_api.state_processor.common.messenger.persist' shared service.
     *
     * @return \Sylius\Bundle\ApiBundle\StateProcessor\Common\MessengerPersistProcessor
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/ProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/sylius/src/Sylius/Bundle/ApiBundle/StateProcessor/Common/MessengerPersistProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/Processor/WriteProcessor.php';

        $a = ($container->privates['api_platform.state_processor.locator'] ?? $container->load('getApiPlatform_StateProcessor_LocatorService'));

        if (isset($container->privates['sylius_api.state_processor.common.messenger.persist'])) {
            return $container->privates['sylius_api.state_processor.common.messenger.persist'];
        }
        $b = new \ApiPlatform\State\Processor\WriteProcessor(NULL, $a);
        if ($container->has('debug.stopwatch')) {
            $b->setStopwatch(($container->services['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
        }

        return $container->privates['sylius_api.state_processor.common.messenger.persist'] = new \Sylius\Bundle\ApiBundle\StateProcessor\Common\MessengerPersistProcessor($b);
    }
}
